/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";

export default function Stars() {
  function genRandom(min, max) {
    return Math.random() * (max - min) + min;
  }
  return [...Array(30)].map((_, idx) => {
    return (
      <Model
        key={idx}
        position={[genRandom(-13, 5), genRandom(6, 10), genRandom(5, 15)]}
        scale={genRandom(0, 3)}
        rotation={[0, THREE.MathUtils.degToRad(genRandom(0, 360)), 0]}
      />
    );
  });
}

function Model({ position, scale, rotation }) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/star.glb");

  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    group.current.rotation.y += 0.01;
    group.current.children[0].material.emissiveIntensity = THREE.MathUtils.lerp(
      group.current.children[0].material.emissiveIntensity,
      Math.abs(
        group.current.children[0].material.emissiveIntensity + Math.sin(t) / 20
      ),
      0.1
    );
  });
  return (
    <group
      ref={group}
      dispose={null}
      rotation={rotation}
      position={position}
      scale={scale}
    >
      <mesh
        geometry={nodes.Sphere.geometry}
        material={materials.Material_0}
        scale={0.1}
      />
    </group>
  );
}

useGLTF.preload("/star.glb");
